class Tetromino {
    field int type, x, y, rotation, frame;
    field boolean success;
    field Board board;

    constructor Tetromino new(int seed) {
        let success = true;
        let x = 5;
        let y = 2;
        let type = seed;
        let rotation = 0;
        let board = Board.new();
        return this;
    }

    method void dispose() {
        do board.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void draw() {
        let success =  board.draw(x, y, type, rotation);
        return;
    }

    method void erase() {
        let success = board.erase(x, y, type, rotation);
        return;
    }

    method boolean tick(int direction) {
        do erase();
        if ( (x > 0)  & (direction = 0)) {
            let x = x - 1;
        }
        if( (x < 9) & (direction = 1)) {
            let x = x + 1;
        }
        let y = y + 1;
        let frame = frame + 1;
        do draw();
        return success;
    }

    method void rotate() {
        do erase();
        if( rotation < 4) {
            let rotation = rotation + 1;
        }
        if( (rotation = 4) ) {
            let rotation = 0;
        }
        do draw();
        return;
    }
}